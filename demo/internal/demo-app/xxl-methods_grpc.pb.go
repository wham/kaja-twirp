// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/xxl-methods.proto

package demo_app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	XXLMethods_Method1_FullMethodName  = "/XXLMethods/Method1"
	XXLMethods_Method2_FullMethodName  = "/XXLMethods/Method2"
	XXLMethods_Method3_FullMethodName  = "/XXLMethods/Method3"
	XXLMethods_Method4_FullMethodName  = "/XXLMethods/Method4"
	XXLMethods_Method5_FullMethodName  = "/XXLMethods/Method5"
	XXLMethods_Method6_FullMethodName  = "/XXLMethods/Method6"
	XXLMethods_Method7_FullMethodName  = "/XXLMethods/Method7"
	XXLMethods_Method8_FullMethodName  = "/XXLMethods/Method8"
	XXLMethods_Method9_FullMethodName  = "/XXLMethods/Method9"
	XXLMethods_Method10_FullMethodName = "/XXLMethods/Method10"
	XXLMethods_Method11_FullMethodName = "/XXLMethods/Method11"
	XXLMethods_Method12_FullMethodName = "/XXLMethods/Method12"
	XXLMethods_Method13_FullMethodName = "/XXLMethods/Method13"
	XXLMethods_Method14_FullMethodName = "/XXLMethods/Method14"
	XXLMethods_Method15_FullMethodName = "/XXLMethods/Method15"
	XXLMethods_Method16_FullMethodName = "/XXLMethods/Method16"
	XXLMethods_Method17_FullMethodName = "/XXLMethods/Method17"
	XXLMethods_Method18_FullMethodName = "/XXLMethods/Method18"
	XXLMethods_Method19_FullMethodName = "/XXLMethods/Method19"
	XXLMethods_Method20_FullMethodName = "/XXLMethods/Method20"
)

// XXLMethodsClient is the client API for XXLMethods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XXLMethodsClient interface {
	Method1(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method3(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method4(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method5(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method6(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method7(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method8(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method9(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method10(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method11(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method12(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method13(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method14(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method15(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method16(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method17(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method18(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method19(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Method20(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type xXLMethodsClient struct {
	cc grpc.ClientConnInterface
}

func NewXXLMethodsClient(cc grpc.ClientConnInterface) XXLMethodsClient {
	return &xXLMethodsClient{cc}
}

func (c *xXLMethodsClient) Method1(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method3(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method3_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method4(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method4_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method5(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method5_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method6(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method6_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method7(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method7_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method8(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method8_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method9(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method9_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method10(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method10_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method11(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method11_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method12(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method12_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method13(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method13_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method14(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method14_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method15(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method15_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method16(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method16_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method17(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method17_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method18(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method18_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method19(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method19_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xXLMethodsClient) Method20(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, XXLMethods_Method20_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XXLMethodsServer is the server API for XXLMethods service.
// All implementations must embed UnimplementedXXLMethodsServer
// for forward compatibility.
type XXLMethodsServer interface {
	Method1(context.Context, *Request) (*Response, error)
	Method2(context.Context, *Request) (*Response, error)
	Method3(context.Context, *Request) (*Response, error)
	Method4(context.Context, *Request) (*Response, error)
	Method5(context.Context, *Request) (*Response, error)
	Method6(context.Context, *Request) (*Response, error)
	Method7(context.Context, *Request) (*Response, error)
	Method8(context.Context, *Request) (*Response, error)
	Method9(context.Context, *Request) (*Response, error)
	Method10(context.Context, *Request) (*Response, error)
	Method11(context.Context, *Request) (*Response, error)
	Method12(context.Context, *Request) (*Response, error)
	Method13(context.Context, *Request) (*Response, error)
	Method14(context.Context, *Request) (*Response, error)
	Method15(context.Context, *Request) (*Response, error)
	Method16(context.Context, *Request) (*Response, error)
	Method17(context.Context, *Request) (*Response, error)
	Method18(context.Context, *Request) (*Response, error)
	Method19(context.Context, *Request) (*Response, error)
	Method20(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedXXLMethodsServer()
}

// UnimplementedXXLMethodsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedXXLMethodsServer struct{}

func (UnimplementedXXLMethodsServer) Method1(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method1 not implemented")
}
func (UnimplementedXXLMethodsServer) Method2(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method2 not implemented")
}
func (UnimplementedXXLMethodsServer) Method3(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method3 not implemented")
}
func (UnimplementedXXLMethodsServer) Method4(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method4 not implemented")
}
func (UnimplementedXXLMethodsServer) Method5(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method5 not implemented")
}
func (UnimplementedXXLMethodsServer) Method6(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method6 not implemented")
}
func (UnimplementedXXLMethodsServer) Method7(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method7 not implemented")
}
func (UnimplementedXXLMethodsServer) Method8(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method8 not implemented")
}
func (UnimplementedXXLMethodsServer) Method9(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method9 not implemented")
}
func (UnimplementedXXLMethodsServer) Method10(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method10 not implemented")
}
func (UnimplementedXXLMethodsServer) Method11(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method11 not implemented")
}
func (UnimplementedXXLMethodsServer) Method12(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method12 not implemented")
}
func (UnimplementedXXLMethodsServer) Method13(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method13 not implemented")
}
func (UnimplementedXXLMethodsServer) Method14(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method14 not implemented")
}
func (UnimplementedXXLMethodsServer) Method15(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method15 not implemented")
}
func (UnimplementedXXLMethodsServer) Method16(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method16 not implemented")
}
func (UnimplementedXXLMethodsServer) Method17(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method17 not implemented")
}
func (UnimplementedXXLMethodsServer) Method18(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method18 not implemented")
}
func (UnimplementedXXLMethodsServer) Method19(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method19 not implemented")
}
func (UnimplementedXXLMethodsServer) Method20(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method20 not implemented")
}
func (UnimplementedXXLMethodsServer) mustEmbedUnimplementedXXLMethodsServer() {}
func (UnimplementedXXLMethodsServer) testEmbeddedByValue()                    {}

// UnsafeXXLMethodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XXLMethodsServer will
// result in compilation errors.
type UnsafeXXLMethodsServer interface {
	mustEmbedUnimplementedXXLMethodsServer()
}

func RegisterXXLMethodsServer(s grpc.ServiceRegistrar, srv XXLMethodsServer) {
	// If the following call pancis, it indicates UnimplementedXXLMethodsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&XXLMethods_ServiceDesc, srv)
}

func _XXLMethods_Method1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method1(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method2(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method3_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method3(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method4_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method4(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method5_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method5(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method5_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method5(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method6_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method6(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method7_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method7(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method7_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method7(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method8_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method8(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method8_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method8(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method9_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method9(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method9_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method9(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method10_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method10(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method10_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method10(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method11_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method11(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method11_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method11(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method12_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method12(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method12_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method12(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method13_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method13(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method13_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method13(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method14_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method14(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method14_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method14(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method15_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method15(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method15_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method15(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method16_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method16(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method16_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method16(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method17_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method17(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method17_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method17(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method18_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method18(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method18_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method18(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method19_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method19(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method19_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method19(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _XXLMethods_Method20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XXLMethodsServer).Method20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XXLMethods_Method20_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XXLMethodsServer).Method20(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// XXLMethods_ServiceDesc is the grpc.ServiceDesc for XXLMethods service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XXLMethods_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "XXLMethods",
	HandlerType: (*XXLMethodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Method1",
			Handler:    _XXLMethods_Method1_Handler,
		},
		{
			MethodName: "Method2",
			Handler:    _XXLMethods_Method2_Handler,
		},
		{
			MethodName: "Method3",
			Handler:    _XXLMethods_Method3_Handler,
		},
		{
			MethodName: "Method4",
			Handler:    _XXLMethods_Method4_Handler,
		},
		{
			MethodName: "Method5",
			Handler:    _XXLMethods_Method5_Handler,
		},
		{
			MethodName: "Method6",
			Handler:    _XXLMethods_Method6_Handler,
		},
		{
			MethodName: "Method7",
			Handler:    _XXLMethods_Method7_Handler,
		},
		{
			MethodName: "Method8",
			Handler:    _XXLMethods_Method8_Handler,
		},
		{
			MethodName: "Method9",
			Handler:    _XXLMethods_Method9_Handler,
		},
		{
			MethodName: "Method10",
			Handler:    _XXLMethods_Method10_Handler,
		},
		{
			MethodName: "Method11",
			Handler:    _XXLMethods_Method11_Handler,
		},
		{
			MethodName: "Method12",
			Handler:    _XXLMethods_Method12_Handler,
		},
		{
			MethodName: "Method13",
			Handler:    _XXLMethods_Method13_Handler,
		},
		{
			MethodName: "Method14",
			Handler:    _XXLMethods_Method14_Handler,
		},
		{
			MethodName: "Method15",
			Handler:    _XXLMethods_Method15_Handler,
		},
		{
			MethodName: "Method16",
			Handler:    _XXLMethods_Method16_Handler,
		},
		{
			MethodName: "Method17",
			Handler:    _XXLMethods_Method17_Handler,
		},
		{
			MethodName: "Method18",
			Handler:    _XXLMethods_Method18_Handler,
		},
		{
			MethodName: "Method19",
			Handler:    _XXLMethods_Method19_Handler,
		},
		{
			MethodName: "Method20",
			Handler:    _XXLMethods_Method20_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/xxl-methods.proto",
}
