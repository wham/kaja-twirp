#!/bin/bash
set -e

# Check if Go is installed, if not ask for user confirmation to install it using Homebrew
if ! command -v go &> /dev/null
then
    echo "Go is not installed."
    read -p "Would you like to install Go using Homebrew? (y/n) " -n 1 -r
    echo    # Move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        echo "Installing Go using Homebrew..."
        brew install go
    else
        echo "Go installation skipped. Exiting script."
        exit 1
    fi
fi

# Check if Node.js is installed, if not ask for user confirmation to install it using Homebrew
if ! command -v node &> /dev/null
then
    echo "Node.js is not installed."
    read -p "Would you like to install Node.js using Homebrew? (y/n) " -n 1 -r
    echo    # Move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        echo "Installing Node.js using Homebrew..."
        brew install node
    else
        echo "Node.js installation skipped. Exiting script."
        exit 1
    fi
fi

# Check if protoc is installed, if not ask for user confirmation to install it using Homebrew
if ! command -v protoc &> /dev/null
then
    echo "protoc is not installed."
    read -p "Would you like to install protoc using Homebrew? (y/n) " -n 1 -r
    echo    # Move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        echo "Installing protoc using Homebrew..."
        brew install protobuf
    else
        echo "protoc installation skipped. Exiting script."
        exit 1
    fi
fi

# Check if envoy is installed, if not ask for user confirmation to install it using Homebrew
if ! command -v envoy &> /dev/null
then
    echo "envoy is not installed."
    read -p "Would you like to install envoy using Homebrew? (y/n) " -n 1 -r
    echo    # Move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        echo "Installing envoy using Homebrew..."
        brew install envoy
    else
        echo "envoy installation skipped. Exiting script."
        exit 1
    fi
fi

# Kill background demo-app when the script exits
trap "trap - SIGTERM && kill -- -$$" SIGINT SIGTERM EXIT

cd "$(dirname "$0")/.."
export GOBIN=$PWD/build
export PATH=$GOBIN:$PATH
go install github.com/twitchtv/twirp/protoc-gen-twirp@latest
go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

cd "./ui"
npm i
npm run protoc

cd "../demo"
protoc --proto_path=. \
    --plugin=protoc-gen-go=../build/protoc-gen-go --go_out=. \
    --plugin=protoc-gen-twirp=../build/protoc-gen-twirp --twirp_out=. \
    --plugin=protoc-gen-go-grpc=../build/protoc-gen-go-grpc --go-grpc_out=. \
    -Iproto/ $(find . -iname "*.proto")
go build -o /tmp/demo-app ./cmd/demo-app
/tmp/demo-app &

cd "../server"
go run cmd/build-assets/build-assets.go
protoc --proto_path=. --plugin=protoc-gen-go=../build/protoc-gen-go --go_out=. --plugin=protoc-gen-twirp=../build/protoc-gen-twirp --twirp_out=. -Iproto/ $(find . -iname "*.proto")
go build -tags development -o /tmp/kaja ./cmd/server
/tmp/kaja
